//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.0

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Default)]
#[sea_orm(table_name = "subjects")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    #[sea_orm(unique)]
    pub name: String,
    pub instructor_id: Option<Uuid>,
    pub cron_expr: String,
    pub create_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::attendances::Entity")]
    Attendances,
    #[sea_orm(
        belongs_to = "super::instructors::Entity",
        from = "Column::InstructorId",
        to = "super::instructors::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Instructors,
}

impl Related<super::attendances::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Attendances.def()
    }
}

impl Related<super::instructors::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Instructors.def()
    }
}

impl Related<super::attendees::Entity> for Entity {
    fn to() -> RelationDef {
        super::attendees_subjects::Relation::Attendees.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::attendees_subjects::Relation::Subjects.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
